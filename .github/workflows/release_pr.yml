on: workflow_call

jobs:
  release_pr:
    name: Release Pull Request
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ vars.NODE_VERSION }}
      - name: Auth
        uses: actions/create-github-app-token@v1
        id: auth
        with: 
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
      - name: Set ENV variables
        run: |
          echo "REPO_NAME=${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}" >> $GITHUB_ENV
          echo "DATE=$(date +'%d.%m.%Y')" >> $GITHUB_ENV
      - name: Changelog
        run: |
          git config --global user.email "sheep@taskany.org"
          git config --global user.name "Taskany Sheep"
          npx @taskany/release@latest
          npm version $(cat version) --git-tag-version false
          git checkout -b releases/$(cat version)
          git add .
          git commit -n -m "chore: release $(cat version)"
          git push --no-verify origin releases/$(cat version)
      - name: Get commits
        id: commit_messages
        run: |
          git checkout releases/$(cat version)
          commits=$(git log $(git describe --tags --abbrev=0)..HEAD --no-merges --pretty=format:%H)
          echo "commits=${commits//$'\n'/','}" >> $GITHUB_OUTPUT
      - name: Get JIRA tasks
        id: jira_tasks
        uses: actions/github-script@v7
        env:
          COMMIT_MESSAGES: ${{ steps.commit_messages.outputs.commits }}
        with: 
          script: |
            const hashes = process.env.COMMIT_MESSAGES.split(',');
            const tasks = [];

            for (const hash of hashes) {
              try {
                const { data } = await github.rest.repos.getCommit({
                  owner: `${{ github.repository_owner }}`,
                  repo: process.env.REPO_NAME,
                  ref: hash
                });

                const jiraIdMatch = data.commit.message.toLocaleLowerCase().match(/${{ secrets.JIRA_KEY }}-\d+/i);
                const id = jiraIdMatch ? jiraIdMatch[0] : null;
            
                if (id) {
                  tasks.push(id);
                }
              } catch (error) {
                console.error(`Error fetching PR #${hash}:`, error);
              }
            }

            return tasks;

      - name: Send MM
        uses: mattermost/action-mattermost-notify@master
        if: ${{ vars.RELEASE_PROJECT_NAME }}
        with:
          MATTERMOST_WEBHOOK_URL: ${{ secrets.WEBHOOKS_RELEASE_LF_MM }}
          TEXT: |-
            {
              "name": "${{ vars.RELEASE_PROJECT_NAME }}",
              "version": "Release ${{ env.DATE }}",
              "applicationType": "web",
              "hotfix": false,
              "authorMmUser": "assabotovich",
              "configurationElement": "${{ secrets.CE }}",
              "distributionLink": "",
              "tasks": ${{ steps.jira_tasks.outputs.result }},
              "jiraProject": "${{ secrets.RELEASE_JIRA_KEY }}"
            }
      - name: Pull Request
        id: pr
        env:
          GH_TOKEN: ${{ steps.auth.outputs.token }}
        run: |
          gh pr create --head $(git branch --show-current) --title "Release $(cat version)" --label release -F .release_bot/body
          
